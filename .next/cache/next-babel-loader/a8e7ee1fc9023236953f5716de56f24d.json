{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst initalState = {\n  user: {\n    loginFl: false,\n    user: null,\n    signUpDate: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n}; // const changeNickname = {\n//   type: \"CHANGE_NICKNAME\",\n//   data: \"wooseop\",\n// };\n//같은 액션 데이터만 동적으로 바꾸는 함수 , action creator\n\nconst changeNickname = data => {\n  return {\n    type: \"CHANGE_NICKNAME\",\n    data\n  };\n};\n\nconst login = data => {\n  return {\n    type: \"LOG_IN\",\n    data\n  };\n}; //NOTE:(이전상태, 액션) => return 다음상태\n\n\nconst rootReducer = (state = initalState, action) => {\n  switch (action.type) {\n    case \"LOG_IN\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loginFl: true\n      });\n\n    default:\n      break;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["E:/happy-sonday_react/node-sns/reducers/index.js"],"names":["initalState","user","loginFl","signUpDate","loginData","post","mainPosts","changeNickname","data","type","login","rootReducer","state","action"],"mappings":";;;;;;AAAA,MAAMA,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,KADL;AAEJD,IAAAA,IAAI,EAAE,IAFF;AAGJE,IAAAA,UAAU,EAAE,EAHR;AAIJC,IAAAA,SAAS,EAAE;AAJP,GADY;AAOlBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AADP;AAPY,CAApB,C,CAYA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAE,iBADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,MAAME,KAAK,GAAIF,IAAD,IAAU;AACtB,SAAO;AACLC,IAAAA,IAAI,EAAE,QADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALD,C,CAOA;;;AACA,MAAMG,WAAW,GAAG,CAACC,KAAK,GAAGZ,WAAT,EAAsBa,MAAtB,KAAiC;AACnD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAK,QAAL;AACE,6CACKG,KADL;AAEEV,QAAAA,OAAO,EAAE;AAFX;;AAKF;AACE;AARJ;AAUD,CAXD;;AAaA,eAAeS,WAAf","sourcesContent":["const initalState = {\r\n  user: {\r\n    loginFl: false,\r\n    user: null,\r\n    signUpDate: {},\r\n    loginData: {},\r\n  },\r\n  post: {\r\n    mainPosts: [],\r\n  },\r\n};\r\n\r\n// const changeNickname = {\r\n//   type: \"CHANGE_NICKNAME\",\r\n//   data: \"wooseop\",\r\n// };\r\n\r\n//같은 액션 데이터만 동적으로 바꾸는 함수 , action creator\r\nconst changeNickname = (data) => {\r\n  return {\r\n    type: \"CHANGE_NICKNAME\",\r\n    data,\r\n  };\r\n};\r\n\r\nconst login = (data) => {\r\n  return {\r\n    type: \"LOG_IN\",\r\n    data,\r\n  };\r\n};\r\n\r\n//NOTE:(이전상태, 액션) => return 다음상태\r\nconst rootReducer = (state = initalState, action) => {\r\n  switch (action.type) {\r\n    case \"LOG_IN\":\r\n      return {\r\n        ...state,\r\n        loginFl: true,\r\n      };\r\n\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport user from \"../reducers/user\";\nimport posts from \"../reducers/post\";\nimport { combineReducers } from \"redux\";\nconst initalState = {}; // const changeNickname = {\n//   type: \"CHANGE_NICKNAME\",\n//   data: \"wooseop\",\n// };\n//같은 액션 데이터만 동적으로 바꾸는 함수 , action creator\n// const changeNickname = (data) => {\n//   return {\n//     type: \"CHANGE_NICKNAME\",\n//     data,\n//   };\n// };\n//NOTE:(이전상태, 액션) => return 다음상태\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  poset\n});\nexport default rootReducer;","map":{"version":3,"sources":["E:/happy-sonday_react/node-sns/reducers/index.js"],"names":["HYDRATE","user","posts","combineReducers","initalState","rootReducer","index","state","action","type","console","log","payload","poset"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,MAAMC,WAAW,GAAG,EAApB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,WAAW,GAAGF,eAAe,CAAC;AAClCG,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC7B,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKT,OAAL;AACEU,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AAEF;AACE,eAAOL,KAAP;AANJ;AAQD,GAViC;AAWlCN,EAAAA,IAXkC;AAYlCY,EAAAA;AAZkC,CAAD,CAAnC;AAeA,eAAeR,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\nimport user from \"../reducers/user\";\r\nimport posts from \"../reducers/post\";\r\nimport { combineReducers } from \"redux\";\r\nconst initalState = {};\r\n\r\n// const changeNickname = {\r\n//   type: \"CHANGE_NICKNAME\",\r\n//   data: \"wooseop\",\r\n// };\r\n\r\n//같은 액션 데이터만 동적으로 바꾸는 함수 , action creator\r\n// const changeNickname = (data) => {\r\n//   return {\r\n//     type: \"CHANGE_NICKNAME\",\r\n//     data,\r\n//   };\r\n// };\r\n\r\n//NOTE:(이전상태, 액션) => return 다음상태\r\nconst rootReducer = combineReducers({\r\n  index: (state = {}, action) => {\r\n    switch (action.type) {\r\n      case HYDRATE:\r\n        console.log(\"HYDRATE\", action);\r\n        return { ...state, ...action.payload };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  },\r\n  user,\r\n  poset,\r\n});\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, fork, put, takeLatest, throttle, call } from \"redux-saga/effects\";\nimport shortid from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, generateDummyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/post\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI);\n\n    const id = shortid.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  //back에서 req.body.content\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    //yield delay(1000);\n    const result = yield call(addPostAPI, action.data); //const id = shortid.generate();\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      // data: {\n      //   id,\n      //   content: action.data,\n      // },\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      //data: id,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI);\n    //const id = shortid.generate();\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    //yield delay(1000);\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      // data: {\n      //   content: action.data,\n      // },\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["E:/happy-sonday_react/node-sns/sagas/post.js"],"names":["axios","all","delay","fork","put","takeLatest","throttle","call","shortid","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","generateDummyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","id","generate","type","err","console","error","response","addPostAPI","post","content","addPost","result","removePostAPI","delete","removePost","addCommentAPI","postId","withCredentials","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  all,\r\n  delay,\r\n  fork,\r\n  put,\r\n  takeLatest,\r\n  throttle,\r\n  call,\r\n} from \"redux-saga/effects\";\r\nimport shortid from \"shortid\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  generateDummyPost,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/api/post\", data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(addPostAPI);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction addPostAPI(data) {\r\n  //back에서 req.body.content\r\n  return axios.post(\"/post\", { content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    //yield delay(1000);\r\n    const result = yield call(addPostAPI, action.data);\r\n    //const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      // data: {\r\n      //   id,\r\n      //   content: action.data,\r\n      // },\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      //data: id,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(addPostAPI);\r\n    //const id = shortid.generate();\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    //yield delay(1000);\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      // data: {\r\n      //   content: action.data,\r\n      // },\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadPosts),\r\n    fork(watchAddPost),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
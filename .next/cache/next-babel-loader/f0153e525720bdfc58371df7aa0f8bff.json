{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport shortid from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/post\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI);\n\n    const id = shortid.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI);\n\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI);\n    //const id = shortid.generate();\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      // data: {\n      //   content: action.data,\n      // },\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["E:/happy-sonday_react/node-sns/sagas/post.js"],"names":["axios","all","delay","fork","put","takeLatest","shortid","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","id","generate","type","content","err","console","error","response","addPostAPI","post","addPost","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,gBANF,EAOEC,kBAPF,EAQEC,kBARF,EASEC,kBATF,EAUEC,mBAVF,EAWEC,mBAXF,EAYEC,mBAZF,QAaO,kBAbP;AAcA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;;AAEA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,SAAOtB,KAAK,CAACuB,GAAN,CAAU,WAAV,EAAuBD,IAAvB,CAAP;AACD;;AAED,UAAUE,SAAV,CAAoBC,MAApB,EAA4B;AAC1B,MAAI;AACF,UAAMvB,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMwB,EAAE,GAAGpB,OAAO,CAACqB,QAAR,EAAX;AACA,UAAMvB,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAAEb,kBADE;AAERO,MAAAA,IAAI,EAAE;AACJI,QAAAA,EADI;AAEJG,QAAAA,OAAO,EAAEJ,MAAM,CAACH;AAFZ;AAFE,KAAD,CAAT;AAOD,GAXD,CAWE,OAAOQ,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAM1B,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAAEf,kBADE;AAERS,MAAAA,IAAI,EAAEQ,GAAG,CAACG,QAAJ,CAAaX;AAFX,KAAD,CAAT;AAID;AACF;;AACD,SAASY,UAAT,CAAoBZ,IAApB,EAA0B;AACxB,SAAOtB,KAAK,CAACmC,IAAN,CAAW,WAAX,EAAwBb,IAAxB,CAAP;AACD;;AAED,UAAUc,OAAV,CAAkBX,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMvB,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAMwB,EAAE,GAAGpB,OAAO,CAACqB,QAAR,EAAX;AACA,UAAMvB,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAAEhB,gBADE;AAERU,MAAAA,IAAI,EAAE;AACJI,QAAAA,EADI;AAEJG,QAAAA,OAAO,EAAEJ,MAAM,CAACH;AAFZ;AAFE,KAAD,CAAT;AAOA,UAAMlB,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAAET,cADE;AAERG,MAAAA,IAAI,EAAEI;AAFE,KAAD,CAAT;AAID,GAfD,CAeE,OAAOI,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAM1B,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAAElB,gBADE;AAERY,MAAAA,IAAI,EAAEQ,GAAG,CAACG,QAAJ,CAAaX;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASe,aAAT,CAAuBf,IAAvB,EAA6B;AAC3B,SAAOtB,KAAK,CAACsC,MAAN,CAAa,WAAb,EAA0BhB,IAA1B,CAAP;AACD;;AAED,UAAUiB,UAAV,CAAqBd,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMvB,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;AACA;;AACA,UAAME,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAAEV,mBADE;AAERI,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAIA,UAAMlB,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAAER,iBADE;AAERE,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GAZD,CAYE,OAAOQ,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAM1B,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAAEZ,mBADE;AAERM,MAAAA,IAAI,EAAEQ,GAAG,CAACG,QAAJ,CAAaX;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASkB,aAAT,CAAuBlB,IAAvB,EAA6B;AAC3B,SAAOtB,KAAK,CAACmC,IAAN,CAAY,aAAYb,IAAI,CAACmB,MAAO,SAApC,EAA8CnB,IAA9C,CAAP;AACD;;AAED,UAAUoB,UAAV,CAAqBjB,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMvB,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAME,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAAEnB,mBADE;AAER;AACA;AACA;AACAa,MAAAA,IAAI,EAAEG,MAAM,CAACH;AALL,KAAD,CAAT;AAOD,GAVD,CAUE,OAAOQ,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA,UAAM1B,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAAErB,mBADE;AAERe,MAAAA,IAAI,EAAEQ,GAAG,CAACG,QAAJ,CAAaX;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUqB,cAAV,GAA2B;AACzB,QAAMtC,UAAU,CAACS,kBAAD,EAAqBU,SAArB,CAAhB;AACD;;AACD,UAAUoB,YAAV,GAAyB;AACvB,QAAMvC,UAAU,CAACM,gBAAD,EAAmByB,OAAnB,CAAhB;AACD;;AAED,UAAUS,eAAV,GAA4B;AAC1B,QAAMxC,UAAU,CAACY,mBAAD,EAAsBsB,UAAtB,CAAhB;AACD;;AACD,UAAUO,eAAV,GAA4B;AAC1B,QAAMzC,UAAU,CAACG,mBAAD,EAAsBkC,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUK,QAAV,GAAqB;AAClC,QAAM9C,GAAG,CAAC,CACRE,IAAI,CAACwC,cAAD,CADI,EAERxC,IAAI,CAACyC,YAAD,CAFI,EAGRzC,IAAI,CAAC0C,eAAD,CAHI,EAIR1C,IAAI,CAAC2C,eAAD,CAJI,CAAD,CAAT;AAMD","sourcesContent":["import axios from \"axios\";\r\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport shortid from \"shortid\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/api/post\", data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(addPostAPI);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(addPostAPI);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(addPostAPI);\r\n    //const id = shortid.generate();\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(addPostAPI);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      // data: {\r\n      //   content: action.data,\r\n      // },\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLoadPosts),\r\n    fork(watchAddPost),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
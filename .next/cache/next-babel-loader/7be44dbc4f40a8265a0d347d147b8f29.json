{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\nexport const LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\nexport const LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\nexport const SING_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport const SING_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport const SING_UP_FAILURE = \"SIGN_UP_FAILURE\";\nexport const FOLLOW_REQUEST = \"FOLLOW_REQUEST\";\nexport const FOLLOW_SUCCESS = \"FOLLOW_SUCCESS\";\nexport const FOLLOW_FAILURE = \"FOLLOW_FAILURE\";\nexport const UNFOLLOW_REQUEST = \"UNFOLLOW_REQUEST\";\nexport const UNFOLLOW_SUCCESS = \"UNFOLLOW_SUCCESS\";\nexport const UNFOLLOW_FAILURE = \"UNFOLLOW_FAILURE\";\n\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\n\nfunction* logIn(action) {\n  try {\n    console.log(\"saga LOG_IN_REQUEST ACTION\");\n    yield delay(1000); //const result = yield call(logInAPI);\n\n    yield put({\n      type: LOG_IN_REQUEST,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI);\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["E:/happy-sonday_react/node-sns/sagas/user.js"],"names":["axios","all","delay","fork","put","takeLatest","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SING_UP_REQUEST","SING_UP_SUCCESS","SING_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","logInAPI","post","logIn","action","console","log","type","data","error","response","logOut","err","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AAEA,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;;AAEP,SAASC,QAAT,GAAoB;AAClB,SAAOrB,KAAK,CAACsB,IAAN,CAAW,YAAX,CAAP;AACD;;AACD,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,UAAMxB,KAAK,CAAC,IAAD,CAAX,CAFE,CAGF;;AACA,UAAME,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAErB,cADE;AAERsB,MAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFL,KAAD,CAAT;AAID,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAMzB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEnB,cADE;AAERoB,MAAAA,IAAI,EAAEC,KAAK,CAACC,QAAN,CAAeF;AAFb,KAAD,CAAT;AAID;AACF;;AAED,UAAUG,MAAV,GAAmB;AACjB,MAAI;AACF,UAAM7B,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAME,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEjB;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOsB,GAAP,EAAY;AACZP,IAAAA,OAAO,CAACI,KAAR,CAAcG,GAAd;AACA,UAAM5B,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEhB,eADE;AAERkB,MAAAA,KAAK,EAAEG,GAAG,CAACF,QAAJ,CAAaF;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUK,UAAV,GAAuB;AACrB,QAAM5B,UAAU,CAACC,cAAD,EAAiBiB,KAAjB,CAAhB;AACD;;AACD,UAAUW,WAAV,GAAwB;AACtB,QAAM7B,UAAU,CAACI,eAAD,EAAkBsB,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMlC,GAAG,CAAC,CAACE,IAAI,CAAC8B,UAAD,CAAL,EAAmB9B,IAAI,CAAC+B,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import axios from \"axios\";\r\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\n\r\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\r\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\r\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\r\n\r\nexport const LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\r\nexport const LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\r\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\r\n\r\nexport const SING_UP_REQUEST = \"SIGN_UP_REQUEST\";\r\nexport const SING_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\r\nexport const SING_UP_FAILURE = \"SIGN_UP_FAILURE\";\r\n\r\nexport const FOLLOW_REQUEST = \"FOLLOW_REQUEST\";\r\nexport const FOLLOW_SUCCESS = \"FOLLOW_SUCCESS\";\r\nexport const FOLLOW_FAILURE = \"FOLLOW_FAILURE\";\r\n\r\nexport const UNFOLLOW_REQUEST = \"UNFOLLOW_REQUEST\";\r\nexport const UNFOLLOW_SUCCESS = \"UNFOLLOW_SUCCESS\";\r\nexport const UNFOLLOW_FAILURE = \"UNFOLLOW_FAILURE\";\r\n\r\nfunction logInAPI() {\r\n  return axios.post(\"/api/login\");\r\n}\r\nfunction* logIn(action) {\r\n  try {\r\n    console.log(\"saga LOG_IN_REQUEST ACTION\");\r\n    yield delay(1000);\r\n    //const result = yield call(logInAPI);\r\n    yield put({\r\n      type: LOG_IN_REQUEST,\r\n      data: action.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
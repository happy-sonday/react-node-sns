{"ast":null,"code":"import axios from \"axios\";\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_SUCCESS } from \"../reducers/user\";\n\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\n\nfunction signUpAPI() {\n  return axios.post(\"/api/signUp\");\n}\n\nfunction* logIn(action) {\n  try {\n    console.log(\"saga LOG_IN_REQUEST ACTION\");\n    yield delay(1000); //const result = yield call(logInAPI);\n\n    yield put({\n      type: LOG_IN_REQUEST,\n      data: action.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: error.response.data\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI);\n\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* signUp() {\n  try {\n    yield delay(1000); // const result = yield call(logOutAPI);\n\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_SUCCESS, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["E:/happy-sonday_react/node-sns/sagas/user.js"],"names":["axios","all","delay","fork","put","takeLatest","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","logInAPI","post","signUpAPI","logIn","action","console","log","type","data","error","response","logOut","err","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,eAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,eAPF,QAQO,kBARP;;AAUA,SAASC,QAAT,GAAoB;AAClB,SAAOb,KAAK,CAACc,IAAN,CAAW,YAAX,CAAP;AACD;;AACD,SAASC,SAAT,GAAqB;AACnB,SAAOf,KAAK,CAACc,IAAN,CAAW,aAAX,CAAP;AACD;;AACD,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,UAAMjB,KAAK,CAAC,IAAD,CAAX,CAFE,CAGF;;AACA,UAAME,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEb,cADE;AAERc,MAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFL,KAAD,CAAT;AAID,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAMlB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEd,cADE;AAERe,MAAAA,IAAI,EAAEC,KAAK,CAACC,QAAN,CAAeF;AAFb,KAAD,CAAT;AAID;AACF;;AAED,UAAUG,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMtB,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAME,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEV;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOe,GAAP,EAAY;AACZP,IAAAA,OAAO,CAACI,KAAR,CAAcG,GAAd;AACA,UAAMrB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAEZ,eADE;AAERc,MAAAA,KAAK,EAAEG,GAAG,CAACF,QAAJ,CAAaF;AAFZ,KAAD,CAAT;AAID;AACF;;AACD,UAAUK,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMxB,KAAK,CAAC,IAAD,CAAX,CADE,CAEF;;AACA,UAAME,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAER;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOa,GAAP,EAAY;AACZP,IAAAA,OAAO,CAACI,KAAR,CAAcG,GAAd;AACA,UAAMrB,GAAG,CAAC;AACRgB,MAAAA,IAAI,EAAET,eADE;AAERW,MAAAA,KAAK,EAAEG,GAAG,CAACF,QAAJ,CAAaF;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUM,UAAV,GAAuB;AACrB,QAAMtB,UAAU,CAACE,cAAD,EAAiBS,KAAjB,CAAhB;AACD;;AACD,UAAUY,WAAV,GAAwB;AACtB,QAAMvB,UAAU,CAACI,eAAD,EAAkBe,MAAlB,CAAhB;AACD;;AACD,UAAUK,WAAV,GAAwB;AACtB,QAAMxB,UAAU,CAACO,eAAD,EAAkBc,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAM7B,GAAG,CAAC,CAACE,IAAI,CAACwB,UAAD,CAAL,EAAmBxB,IAAI,CAACyB,WAAD,CAAvB,EAAsCzB,IAAI,CAAC0B,WAAD,CAA1C,CAAD,CAAT;AACD","sourcesContent":["import axios from \"axios\";\r\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_SUCCESS,\r\n} from \"../reducers/user\";\r\n\r\nfunction logInAPI() {\r\n  return axios.post(\"/api/login\");\r\n}\r\nfunction signUpAPI() {\r\n  return axios.post(\"/api/signUp\");\r\n}\r\nfunction* logIn(action) {\r\n  try {\r\n    console.log(\"saga LOG_IN_REQUEST ACTION\");\r\n    yield delay(1000);\r\n    //const result = yield call(logInAPI);\r\n    yield put({\r\n      type: LOG_IN_REQUEST,\r\n      data: action.data,\r\n    });\r\n  } catch (error) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      data: error.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* signUp() {\r\n  try {\r\n    yield delay(1000);\r\n    // const result = yield call(logOutAPI);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_SUCCESS, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport produce from \"immer\";\nimport shortid from \"shortid\";\nimport shortId from \"shortid\";\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"손데이\"\n    },\n    content: \"첫 번째 게시글 #해시태그 #익스프레스 #더미 #하드코딩\",\n    Images: [{\n      id: shortid.generate(),\n      src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\"\n    }, {\n      id: shortid.generate(),\n      src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\"\n    }, {\n      id: shortid.generate(),\n      src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\"\n    }],\n    Comments: [{\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: \"nero\"\n      },\n      content: \"우와 개정판이 나왔군요~\"\n    }, {\n      id: shortid.generate(),\n      User: {\n        id: shortid.generate(),\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고싶어요~\"\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortid.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"손데이\"\n  }\n}); //NOTE: reducer이전 상태를액셩 통해 다음 상태로 만들어내는 함수 (불변성을 지키면서)\n\n\nconst reducer = (state = initialState, action) => {\n  //immer 기본 꼴\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: true,\n          addPostDone: false,\n          addPostError: null\n        });\n\n      case ADD_POST_SUCCESS:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          //NOTE:게시물 작성 최신으로 하기 위해 [작성글, 이전글]\n          mainPosts: [dummyPost(action.data), ...state.mainPosts],\n          addPostLoading: false,\n          addPostDone: true\n        });\n\n      case ADD_POST_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: false,\n          addPostDone: false\n        });\n\n      case ADD_COMMENT_REQUEST:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: true,\n          addCommentDone: false,\n          addCommentError: null\n        });\n\n      case ADD_COMMENT_SUCCESS:\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n\n        const post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        post.Comments = [dummyComment(action.data.content), ...post.Comments]; //const Comments = [dummyComment(action.data.content), ...post.Comments];\n\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n\n      case ADD_COMMENT_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentDone: false\n        });\n\n      case REMOVE_POST_REQUEST:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          removePostLoading: true,\n          removePostDone: false,\n          removePostError: null\n        });\n\n      case REMOVE_POST_SUCCESS:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          //NOTE:게시물 작성 최신으로 하기 위해 [작성글, 이전글]\n          mainPosts: state.mainPosts.filter(v => v.id !== action.data),\n          removePostLoading: false,\n          removePostDone: true\n        });\n\n      case REMOVE_POST_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          removePostLoading: false,\n          removePostError: action.error\n        });\n\n      default:\n        return state;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["E:/happy-sonday_react/node-sns/reducers/post.js"],"names":["produce","shortid","shortId","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","postIndex","findIndex","v","postId","post","filter","error"],"mappings":"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","sourcesContent":["import produce from \"immer\";\r\nimport shortid from \"shortid\";\r\nimport shortId from \"shortid\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"손데이\",\r\n      },\r\n      content: \"첫 번째 게시글 #해시태그 #익스프레스 #더미 #하드코딩\",\r\n      Images: [\r\n        {\r\n          id: shortid.generate(),\r\n          src: \"https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726\",\r\n        },\r\n        {\r\n          id: shortid.generate(),\r\n          src: \"https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg\",\r\n        },\r\n        {\r\n          id: shortid.generate(),\r\n          src: \"https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg\",\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          id: shortid.generate(),\r\n          User: {\r\n            id: shortid.generate(),\r\n            nickname: \"nero\",\r\n          },\r\n          content: \"우와 개정판이 나왔군요~\",\r\n        },\r\n        {\r\n          id: shortid.generate(),\r\n          User: {\r\n            id: shortid.generate(),\r\n            nickname: \"hero\",\r\n          },\r\n          content: \"얼른 사고싶어요~\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"제로초\",\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortid.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: \"손데이\",\r\n  },\r\n});\r\n\r\n//NOTE: reducer이전 상태를액셩 통해 다음 상태로 만들어내는 함수 (불변성을 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n  //immer 기본 꼴\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        return {\r\n          ...state,\r\n\r\n          addPostLoading: true,\r\n          addPostDone: false,\r\n          addPostError: null,\r\n        };\r\n      case ADD_POST_SUCCESS:\r\n        return {\r\n          ...state,\r\n          //NOTE:게시물 작성 최신으로 하기 위해 [작성글, 이전글]\r\n          mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n          addPostLoading: false,\r\n          addPostDone: true,\r\n        };\r\n      case ADD_POST_FAILURE:\r\n        return {\r\n          ...state,\r\n          addPostLoading: false,\r\n          addPostDone: false,\r\n        };\r\n      case ADD_COMMENT_REQUEST:\r\n        return {\r\n          ...state,\r\n          addCommentLoading: true,\r\n          addCommentDone: false,\r\n          addCommentError: null,\r\n        };\r\n      case ADD_COMMENT_SUCCESS:\r\n        const postIndex = state.mainPosts.findIndex(\r\n          (v) => v.id === action.data.postId\r\n        );\r\n        const post = { ...state.mainPosts[postIndex] };\r\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        //const Comments = [dummyComment(action.data.content), ...post.Comments];\r\n        const mainPosts = [...state.mainPosts];\r\n        mainPosts[postIndex] = post;\r\n        return {\r\n          ...state,\r\n          mainPosts,\r\n          addCommentLoading: false,\r\n          addCommentDone: true,\r\n        };\r\n      case ADD_COMMENT_FAILURE:\r\n        return {\r\n          ...state,\r\n          addCommentLoading: false,\r\n          addCommentDone: false,\r\n        };\r\n\r\n      case REMOVE_POST_REQUEST:\r\n        return {\r\n          ...state,\r\n\r\n          removePostLoading: true,\r\n          removePostDone: false,\r\n          removePostError: null,\r\n        };\r\n      case REMOVE_POST_SUCCESS:\r\n        return {\r\n          ...state,\r\n          //NOTE:게시물 작성 최신으로 하기 위해 [작성글, 이전글]\r\n          mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n          removePostLoading: false,\r\n          removePostDone: true,\r\n        };\r\n      case REMOVE_POST_FAILURE:\r\n        return {\r\n          ...state,\r\n          removePostLoading: false,\r\n          removePostError: action.error,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\happy-sonday_react\\\\node-sns\\\\components\\\\CommentForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Button, Form, Input } from \"antd\";\nimport React, { useCallback, useEffect } from \"react\";\nimport useInput from \"../hooks/useInput\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar dispatch = useDispatch();\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useInput = useInput(\"\"),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone;\n\n  var id = useSelector(function (state) {\n    var _state$user$self;\n\n    console.log(state.user);\n    return (_state$user$self = state.user.self) === null || _state$user$self === void 0 ? void 0 : _state$user$self.id;\n  });\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText(\"\");\n    }\n  }, [addCommentDone]);\n  var onSubmitComment = useCallback(function () {\n    console.log(post.id, commentText);\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: id\n      }\n    });\n  }, [commentText]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onFinish: onSubmitComment,\n    children: /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        position: \"relative\",\n        margin: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        value: commentText,\n        onChange: onChangeCommentText,\n        rows: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        style: {\n          position: \"absolute\",\n          right: 0,\n          bottom: -40,\n          zIndex: 1\n        },\n        children: \"\\uB4F1\\uB85D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CommentForm, \"cUCTEQb/17Tq3E/0+v3Hzff7b94=\", false, function () {\n  return [useInput, useSelector, useSelector];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["E:/happy-sonday_react/node-sns/components/CommentForm.js"],"names":["Button","Form","Input","React","useCallback","useEffect","useInput","PropTypes","useDispatch","useSelector","ADD_COMMENT_REQUEST","dispatch","CommentForm","post","commentText","onChangeCommentText","setCommentText","state","addCommentDone","id","console","log","user","self","onSubmitComment","type","data","content","postId","userId","position","margin","right","bottom","zIndex","propTypes","object","isRequired"],"mappings":";;;;;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,MAApC;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,IAAMC,QAAQ,GAAGH,WAAW,EAA5B;;AAEA,IAAMI,WAAW,GAAG,SAAdA,WAAc,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAChC,kBAA2DP,QAAQ,CAAC,EAAD,CAAnE;AAAA;AAAA,MAAOQ,WAAP;AAAA,MAAoBC,mBAApB;AAAA,MAAyCC,cAAzC;;AACA,qBAA2BP,WAAW,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACJ,IAAjB;AAAA,GAAD,CAAtC;AAAA,MAAQK,cAAR,gBAAQA,cAAR;;AACA,MAAMC,EAAE,GAAGV,WAAW,CAAC,UAACQ,KAAD,EAAW;AAAA;;AAChCG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,IAAlB;AACA,+BAAOL,KAAK,CAACK,IAAN,CAAWC,IAAlB,qDAAO,iBAAiBJ,EAAxB;AACD,GAHqB,CAAtB;AAKAd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIa,cAAJ,EAAoB;AAClBF,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,GAJQ,EAIN,CAACE,cAAD,CAJM,CAAT;AAMA,MAAMM,eAAe,GAAGpB,WAAW,CAAC,YAAM;AACxCgB,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAI,CAACM,EAAjB,EAAqBL,WAArB;AACAH,IAAAA,QAAQ,CAAC;AACPc,MAAAA,IAAI,EAAEf,mBADC;AAEPgB,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAEb,WAAX;AAAwBc,QAAAA,MAAM,EAAEf,IAAI,CAACM,EAArC;AAAyCU,QAAAA,MAAM,EAAEV;AAAjD;AAFC,KAAD,CAAR;AAID,GANkC,EAMhC,CAACL,WAAD,CANgC,CAAnC;AAQA,sBACE,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEU,eAAhB;AAAA,2BACE,QAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAE;AAAEM,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,MAAM,EAAE;AAAhC,OAAlB;AAAA,8BACE,QAAC,KAAD,CAAO,QAAP;AACE,QAAA,KAAK,EAAEjB,WADT;AAEE,QAAA,QAAQ,EAAEC,mBAFZ;AAGE,QAAA,IAAI,EAAE;AAHR;AAAA;AAAA;AAAA;AAAA,eADF,eAME,QAAC,MAAD;AACE,QAAA,IAAI,EAAC,SADP;AAEE,QAAA,QAAQ,EAAC,QAFX;AAGE,QAAA,KAAK,EAAE;AAAEe,UAAAA,QAAQ,EAAE,UAAZ;AAAwBE,UAAAA,KAAK,EAAE,CAA/B;AAAkCC,UAAAA,MAAM,EAAE,CAAC,EAA3C;AAA+CC,UAAAA,MAAM,EAAE;AAAvD,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAkBD,CAxCD;;GAAMtB,W;UACuDN,Q,EAChCG,W,EAChBA,W;;;KAHPG,W;AA0CNA,WAAW,CAACuB,SAAZ,GAAwB;AACtBtB,EAAAA,IAAI,EAAEN,SAAS,CAAC6B,MAAV,CAAiBC;AADD,CAAxB;AAIA,eAAezB,WAAf","sourcesContent":["import { Button, Form, Input } from \"antd\";\r\nimport React, { useCallback, useEffect } from \"react\";\r\nimport useInput from \"../hooks/useInput\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\r\n\r\nconst dispatch = useDispatch();\r\n\r\nconst CommentForm = ({ post }) => {\r\n  const [commentText, onChangeCommentText, setCommentText] = useInput(\"\");\r\n  const { addCommentDone } = useSelector((state) => state.post);\r\n  const id = useSelector((state) => {\r\n    console.log(state.user);\r\n    return state.user.self?.id;\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (addCommentDone) {\r\n      setCommentText(\"\");\r\n    }\r\n  }, [addCommentDone]);\r\n\r\n  const onSubmitComment = useCallback(() => {\r\n    console.log(post.id, commentText);\r\n    dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: { content: commentText, postId: post.id, userId: id },\r\n    });\r\n  }, [commentText]);\r\n\r\n  return (\r\n    <Form onFinish={onSubmitComment}>\r\n      <Form.Item style={{ position: \"relative\", margin: 0 }}>\r\n        <Input.TextArea\r\n          value={commentText}\r\n          onChange={onChangeCommentText}\r\n          rows={4}\r\n        />\r\n        <Button\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          style={{ position: \"absolute\", right: 0, bottom: -40, zIndex: 1 }}\r\n        >\r\n          등록\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CommentForm;\r\n"]},"metadata":{},"sourceType":"module"}